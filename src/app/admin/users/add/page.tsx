
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import Link from "next/link";
import { DashboardLayout } from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useRouter } from "next/navigation";
import { UserPlus, Save, Mail, KeyRound, User as UserIcon, Shield, Phone } from "lucide-react";
import { db } from "@/lib/firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import type { UserRole } from "@/types/platform";
import { useState } from "react"; // Added useState for isSubmitting

const phoneSchemaPart = {
  localPhoneNumber: z.string()
    .refine(val => /^\d*$/.test(val), {
      message: "Phone number must contain only digits.",
    })
    .optional()
    .or(z.literal('')),
};

const userProfileFormSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters.").max(50, "Name is too long."),
  email: z.string().email("Please enter a valid email address."),
  ...phoneSchemaPart,
  role: z.enum(["student", "teacher", "admin"], { required_error: "Please select a role." }),
  password: z.string().min(6, "Password should be at least 6 characters for user setup.").optional(),
}).refine(data => {
  const { localPhoneNumber } = data;
  if (localPhoneNumber && (localPhoneNumber.length < 7 || localPhoneNumber.length > 15)) {
    return false;
  }
  return true;
}, {
  message: "Phone number must be 7-15 digits.",
  path: ["localPhoneNumber"],
});

type UserProfileFormValues = z.infer<typeof userProfileFormSchema>;

export default function AddUserProfilePage() {
  const { toast } = useToast();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<UserProfileFormValues>({
    resolver: zodResolver(userProfileFormSchema),
    defaultValues: {
      name: "",
      email: "",
      localPhoneNumber: "",
      role: "student",
      password: "",
    },
  });

  async function onSubmit(data: UserProfileFormValues) {
    setIsSubmitting(true);
    try {
      const fullPhoneNumber = data.localPhoneNumber && data.localPhoneNumber.trim() !== ""
        ? `+91${data.localPhoneNumber.trim()}`
        : null;
      
      const nameInitial = data.name[0]?.toUpperCase() || data.role[0]?.toUpperCase();

      await addDoc(collection(db, "users"), {
        // id is auto-generated by Firestore, uid will be set by Firebase Auth if user authenticates
        name: data.name,
        email: data.email,
        phoneNumber: fullPhoneNumber,
        role: data.role,
        avatarUrl: `https://placehold.co/100x100.png?text=${nameInitial}`,
        dataAiHint: `${data.role} avatar`,
        createdAt: serverTimestamp(),
        // other fields like stats can be initialized to defaults or added later
        stats: { coursesEnrolled: 0, coursesCompleted: 0, certificatesEarned: 0 },
      });

      toast({
        title: "User Profile Created!",
        description: `Profile for ${data.name} (${data.email}) created in Firestore. An administrator needs to create an Authentication account for this user to enable login.`,
      });
      router.push("/admin/users");
    } catch (error) {
      console.error("Error creating user profile: ", error);
      toast({
        title: "Profile Creation Failed",
        description: "Could not save user profile to the database.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <DashboardLayout role="admin">
      <div className="max-w-2xl mx-auto animate-fade-in space-y-8">
        <header className="animate-slide-in-up" style={{ animationDelay: '50ms'}}>
          <h1 className="text-2xl md:text-3xl font-semibold text-foreground flex items-center">
            <UserPlus className="mr-3 h-7 w-7 text-primary" /> Create User Profile
          </h1>
          <p className="text-md text-muted-foreground mt-1">
            Add a new user profile to the Firestore database. Authentication account needs separate setup.
          </p>
        </header>

        <Card className="shadow-sm border-border/80 rounded-lg animate-slide-in-up hover:shadow-md transition-all-smooth" style={{ animationDelay: '150ms'}}>
          <CardHeader className="p-4 sm:p-5">
            <CardTitle className="text-lg font-semibold text-foreground">New User Profile Details</CardTitle>
          </CardHeader>
          <CardContent className="p-4 sm:p-5">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium flex items-center"><UserIcon className="mr-1.5 h-4 w-4 text-muted-foreground"/>Full Name</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Ada Lovelace" {...field} className="h-9 rounded-md text-sm" disabled={isSubmitting}/>
                      </FormControl>
                      <FormMessage className="text-xs"/>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium flex items-center"><Mail className="mr-1.5 h-4 w-4 text-muted-foreground"/>Email Address</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="user@example.com" {...field} className="h-9 rounded-md text-sm" disabled={isSubmitting}/>
                      </FormControl>
                      <FormMessage className="text-xs"/>
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="localPhoneNumber"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium flex items-center"><Phone className="mr-1.5 h-4 w-4 text-muted-foreground"/>Phone Number (Optional)</FormLabel>
                      <div className="flex items-center gap-2">
                        <div className="flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 text-sm text-muted-foreground select-none">
                          +91
                        </div>
                        <div className="relative flex-grow">
                          <Phone className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                          <FormControl>
                            <Input
                              type="tel"
                              placeholder="e.g., 9876543210"
                              {...field}
                              className="pl-9 h-9 rounded-md text-sm w-full"
                              aria-label="Local Phone Number"
                              disabled={isSubmitting}
                            />
                          </FormControl>
                        </div>
                      </div>
                      <FormMessage className="text-xs"/>
                    </FormItem>
                  )}
                />

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="role"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium flex items-center"><Shield className="mr-1.5 h-4 w-4 text-muted-foreground"/>Role</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value} disabled={isSubmitting}>
                          <FormControl>
                            <SelectTrigger className="h-9 rounded-md text-sm">
                              <SelectValue placeholder="Select user role" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent className="bg-card rounded-md shadow-lg border-border">
                            <SelectItem value="student" className="text-sm">Student</SelectItem>
                            <SelectItem value="teacher" className="text-sm">Teacher</SelectItem>
                            <SelectItem value="admin" className="text-sm">Admin</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage className="text-xs"/>
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="password"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium flex items-center"><KeyRound className="mr-1.5 h-4 w-4 text-muted-foreground"/>Initial Password (Optional)</FormLabel>
                        <FormControl>
                          <Input type="password" placeholder="For user setup notes" {...field} className="h-9 rounded-md text-sm" disabled={isSubmitting}/>
                        </FormControl>
                        <FormDescription className="text-xs text-muted-foreground">
                          Auth account creation is separate. This is for reference.
                        </FormDescription>
                        <FormMessage className="text-xs"/>
                      </FormItem>
                    )}
                  />
                </div>
                <div className="flex justify-end pt-2 gap-2">
                  <Link href="/admin/users" passHref>
                     <Button type="button" variant="outline" className="h-9 rounded-md text-sm" disabled={isSubmitting}>Cancel</Button>
                  </Link>
                  <Button type="submit" className="bg-primary hover:bg-primary/90 text-primary-foreground text-sm h-9 rounded-md" disabled={isSubmitting}>
                    {isSubmitting ? (
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    ) : (
                      <Save className="mr-2 h-4 w-4" />
                    )}
                    {isSubmitting ? "Creating..." : "Create Profile"}
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}
