
'use server';
/**
 * @fileOverview Generates a course structure including modules, chapters, and content blocks
 * with text content, video URLs, and image queries based on a course title.
 * This flow uses tools to make parts of its generation process more agentic.
 *
 * - generateCourseStructure - A function to generate the course structure.
 * - GenerateCourseStructureInput - Input type for the flow.
 * - GenerateCourseStructureOutputAI - Output type for the AI flow (maps to part of Course type).
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { ContentBlockType as PlatformContentBlockType } from '@/types/platform';

// Input Schema
const GenerateCourseStructureInputSchema = z.object({
  courseTitle: z.string().describe('The main title of the course to be generated.'),
  targetAudience: z.string().optional().describe('Optional: Describe the target audience (e.g., beginners, advanced developers).'),
  numberOfModules: z.number().min(1).max(10).optional().describe('Optional: Preferred number of modules (e.g., 3, 4, 5). AI will aim for this if specified, up to a system maximum of 10.'),
});
export type GenerateCourseStructureInput = z.infer<typeof GenerateCourseStructureInputSchema>;

// Output Schema for AI - to match the new structure
const ContentBlockAISchema = z.object({
  type: z.enum(["heading", "text", "image", "video", "link", "file"] as [PlatformContentBlockType, ...PlatformContentBlockType[]]).describe("Type of content block."),
  value: z.string().describe("The primary data for the block. E.g., text, a URL, or a placeholder for a file/image. For images, this MUST be 'https://placehold.co/800x400.png'. For videos, use a tool to get a URL."),
  altText: z.string().optional().describe("Alternative text for images, or descriptive text for links/videos. For videos, use a tool to get relevant alt text."),
  level: z.number().min(1).max(6).optional().describe("Heading level (1-6) if type is 'heading'."),
  dataAiHint: z.string().optional().describe("For image blocks: 1-2 specific keywords for image search, generated by the 'getImageHintTool'. This field is crucial for image blocks."),
});

const ChapterAISchema = z.object({
  title: z.string().describe('The title of the chapter.'),
  contentBlocks: z.array(ContentBlockAISchema).min(1).describe('An array of content blocks for this chapter. Aim for a mix: heading, text, image, video. Utilize available tools for image hints and video suggestions.'),
  estimatedMinutes: z.number().optional().describe("Estimated duration for this chapter in minutes."),
});

const ModuleAISchema = z.object({
  title: z.string().describe('The title of the module.'),
  description: z.string().optional().describe('A brief (1-2 sentences) description of what the module covers.'),
  chapters: z.array(ChapterAISchema).min(1).describe('An array of chapters for this module. Aim for 2-4 chapters per module.'),
});

const GenerateCourseStructureOutputAISchema = z.object({
  title: z.string().describe('The main title of the generated course (should match the input courseTitle).'),
  description: z.string().describe('A concise and engaging overall description of the course (2-4 sentences).'),
  categoryName: z.string().describe('A suggested category for the course (e.g., "Web Development", "Data Science", "History"). Choose from common educational topics.'),
  estimatedDurationMinutes: z.number().optional().describe('An estimated total duration for the course in minutes (e.g., 120 for 2 hours). Based on content generated.'),
  difficultyLevel: z.enum(['Beginner', 'Intermediate', 'Advanced']).describe('The difficulty level of the course.'),
  badgeOnComplete: z.string().optional().describe("A suggested short, catchy badge name for course completion (e.g., 'Code Master', 'History Buff'). Max 3-4 words."),
  modules: z.array(ModuleAISchema).min(1).describe('An array of modules, each containing a title, description, and an array of chapters.'),
});
export type GenerateCourseStructureOutputAI = z.infer<typeof GenerateCourseStructureOutputAISchema>;


// Tool 1: Get Image Hint
const ImageHintInputSchema = z.object({
  chapterTopic: z.string().describe("The main topic or title of the chapter for which an image hint is needed."),
  courseContext: z.string().describe("The overall title or theme of the course to provide context."),
});
const ImageHintOutputSchema = z.object({
  dataAiHint: z.string().describe("1-2 specific keywords for an image search related to the chapter topic and course context. E.g., 'abstract data' or 'historical map'."),
});

const getImageHintTool = ai.defineTool(
  {
    name: 'getImageHintTool',
    description: 'Generates 1-2 specific keywords for an image search based on a chapter topic and overall course context. Used to populate the dataAiHint for image content blocks.',
    inputSchema: ImageHintInputSchema,
    outputSchema: ImageHintOutputSchema,
  },
  async (input) => {
    const { output } = await ai.generate({
        prompt: `You are an expert at generating concise image search keywords. For a chapter titled "${input.chapterTopic}" (context: course on "${input.courseContext}"), provide exactly two distinct and specific keywords for an image search. These keywords should be nouns or noun phrases that visually represent the core concept of the chapter. Examples: 'brain illustration', 'roman colosseum', 'server farm'. Do not use generic terms like 'abstract' or 'concept' unless absolutely necessary. Output only the two keywords, separated by a space. Example output: "keywordOne keywordTwo"`,
        output: { schema: ImageHintOutputSchema },
        config: { temperature: 0.5 } // Slightly lower temperature for more focused keyword output
    });
    // Fallback within the tool if LLM fails to generate keywords
    return output || { dataAiHint: `${input.chapterTopic.substring(0,10).toLowerCase().replace(/\s+/g, '_')} visual` };
  }
);

// Tool 2: Get Video Suggestion
const VideoSuggestionInputSchema = z.object({
  chapterTopic: z.string().describe("The main topic or title of the chapter for which a video suggestion is needed."),
  courseContext: z.string().describe("The overall title or theme of the course to provide context."),
});
const VideoSuggestionOutputSchema = z.object({
  videoUrl: z.string().describe("A YouTube embed URL (e.g., https://www.youtube.com/embed/VIDEO_ID) or a YouTube search query prefixed with 'search:' (e.g., 'search:explanation of quantum physics')."),
  altText: z.string().describe("A concise title or description for the suggested video."),
});

const getVideoSuggestionTool = ai.defineTool(
  {
    name: 'getVideoSuggestionTool',
    description: 'Suggests a relevant YouTube video (embed URL or search query) and alt text for a given chapter topic and course context. Used to populate video content blocks.',
    inputSchema: VideoSuggestionInputSchema,
    outputSchema: VideoSuggestionOutputSchema,
  },
  async (input) => {
    const { output } = await ai.generate({
        prompt: `For a chapter titled "${input.chapterTopic}" in a course about "${input.courseContext}", find a relevant educational YouTube video.
        Provide its direct embed URL (e.g., https://www.youtube.com/embed/VIDEO_ID_HERE).
        If a specific embeddable video cannot be found, provide a YouTube search query string prefixed with 'search:' (e.g., "search:Best explanation of ${input.chapterTopic}").
        Also, provide a concise title for this video (altText).`,
        output: { schema: VideoSuggestionOutputSchema },
        config: { temperature: 0.5 }
    });
    return output || { videoUrl: `search:video about ${input.chapterTopic}`, altText: `Video about ${input.chapterTopic}` }; // Fallback
  }
);


export async function generateCourseStructure(
  input: GenerateCourseStructureInput
): Promise<GenerateCourseStructureOutputAI> {
  const processedInput = { ...input };
  if (processedInput.numberOfModules && processedInput.numberOfModules > 10) {
    console.warn(`AI Course Generation: numberOfModules (${processedInput.numberOfModules}) exceeded schema maximum of 10. Clamping to 10.`);
    processedInput.numberOfModules = 10;
  }
  
  const result = await generateCourseStructureFlow(processedInput);
  return result;
}

const prompt = ai.definePrompt({
  name: 'generateCourseStructurePrompt',
  input: {schema: GenerateCourseStructureInputSchema},
  output: {schema: GenerateCourseStructureOutputAISchema},
  tools: [getImageHintTool, getVideoSuggestionTool], 
  prompt: `You are an expert instructional designer AI. Your task is to generate a comprehensive course structure based on the provided details, formatted for a block-based content editor.

Course Title: "{{courseTitle}}"
Target Audience: {{#if targetAudience}}{{targetAudience}}{{else}}general learners{{/if}}
Number of Modules: {{#if numberOfModules}}Generate exactly {{numberOfModules}} modules (this is a strict requirement, up to the system maximum of 10).{{else}}Generate around 3-5 modules.{{/if}}

Please generate the full course details strictly adhering to the output JSON schema.

**Overall Course Details Instructions:**
- **title:** Use the provided "{{courseTitle}}".
- **description:** Write a concise (2-4 sentences) and engaging overview of the course.
- **categoryName:** Suggest a broad category (e.g., "Web Development", "Business", "Creative Arts").
- **estimatedDurationMinutes:** Estimate a total course duration in minutes. Consider about 10-15 minutes per chapter.
- **difficultyLevel:** Assign 'Beginner', 'Intermediate', 'Advanced'.
- **badgeOnComplete (optional):** Suggest a short, catchy badge name (3-4 words) upon course completion.
- **modules:** Generate a set of modules. {{#if numberOfModules}}You **MUST** create exactly {{numberOfModules}} modules (or 10 if {{numberOfModules}} is greater than 10). Do not generate fewer.{{else}}Aim for 3-5 modules.{{/if}}

**Module Instructions (For each module):**
- **title:** Create a clear and descriptive module title.
- **description (optional):** Provide a brief (1-2 sentences) description of what this module covers.
- **chapters:** Generate an array of 2-4 chapters for this module.

**Chapter Instructions (For each chapter within a module):**
- **title:** Create a specific and informative chapter title.
- **estimatedMinutes (optional):** Estimate duration for this chapter.
- **contentBlocks (array):** Generate a sequence of 3-5 content blocks for this chapter.
    - **Always start with a 'heading' block:**
      { "type": "heading", "level": 3, "value": "Concise Subheading for the Chapter Topic" }
    - **Follow with at least one 'text' block:**
      { "type": "text", "value": "Detailed educational textual content for the chapter. This should be substantial (equivalent to 2-4 well-developed paragraphs or a comprehensive set of bullet points). Format as simple HTML if necessary for structure (use <p>, <h3>, <ul>, <li>, <strong>, <em>)." }
    - **Include one 'image' block suggestion:**
      For the 'image' block, set its "type" to "image". The "value" for the image block **MUST ALWAYS** be the placeholder URL: "https://placehold.co/800x400.png".
      Set the "altText" to a descriptive alt text for an image related to the current Chapter's topic (e.g., "Illustration of neural networks").
      Then, **you MUST use the 'getImageHintTool'** with the current chapter's topic and the overall course context.
      From the 'getImageHintTool's output (which is an object like { "dataAiHint": "keywords" }), take the 'dataAiHint' string value (which will be one or two keywords) and use that string as the value for the 'dataAiHint' field in your image content block. It is critical that you use the 'getImageHintTool' for every single image block to populate its 'dataAiHint' field. Do not use generic hints or skip this step.
    - **Include one 'video' block suggestion:**
      For the 'video' block, set its "type" to "video". **You MUST use the 'getVideoSuggestionTool'** with the chapter's topic and course context.
      Use the 'videoUrl' string from the tool's output as the 'value' for the video block, and the 'altText' string from the tool's output as the 'altText' for the video block. Video URLs MUST be YouTube embed URLs or search queries prefixed with 'search:'.
    - **Optionally, a 'link' block:**
      { "type": "link", "value": "https://relevant-resource.com", "altText": "Description of external resource" }
    - **Optionally, a 'file' block placeholder:**
      { "type": "file", "value": "Placeholder: Worksheet on [Chapter Topic].pdf", "altText": "Downloadable worksheet" } (Do not provide actual file URLs.)

**Important Considerations:**
- Ensure educational value, clarity, and engagement appropriate for the {{targetAudience}}.
- Adhere strictly to the types and structures defined in the output schema, especially for image and video block values.
- The 'text' content blocks are crucial and should be rich and informative.
- Image 'dataAiHint' **MUST** be 1-2 highly specific keywords, obtained from the 'getImageHintTool'.
- Rely on the tools for generating specific fields like 'dataAiHint' for images and 'value'/'altText' for videos.

Generate the complete course structure as a single JSON object.
`,
});

const generateCourseStructureFlow = ai.defineFlow(
  {
    name: 'generateCourseStructureFlow',
    inputSchema: GenerateCourseStructureInputSchema,
    outputSchema: GenerateCourseStructureOutputAISchema,
  },
  async (input) => {
    try {
      const promptInput = {
        ...input,
        targetAudience: input.targetAudience || "general learners",
      };

      const {output} = await prompt(promptInput);
      if (!output) {
        throw new Error('AI did not return course content.');
      }
      // Basic validation/sanitization (can be expanded)
      if (output.categoryName && output.categoryName.length > 50) {
        output.categoryName = output.categoryName.substring(0, 50);
      }
      if (output.modules.length === 0) {
        throw new Error('AI did not generate any modules for the course.');
      }
      output.modules.forEach(module => {
        if (module.chapters.length === 0) {
          throw new Error(`Module "${module.title}" has no chapters.`);
        }
        module.chapters.forEach(chapter => {
          if (chapter.contentBlocks.length === 0) {
            throw new Error(`Chapter "${chapter.title}" in module "${module.title}" has no content blocks.`);
          }
          // Post-processing for video URLs and image blocks
          chapter.contentBlocks.forEach(block => {
            if (block.type === 'video' && block.value) {
              if (block.value.includes("youtube.com/watch?v=")) {
                const videoId = block.value.split("watch?v=")[1]?.split('&')[0];
                if (videoId) {
                  block.value = `https://www.youtube.com/embed/${videoId}`;
                } else if (!block.value.startsWith('search:')) {
                   console.warn(`Could not parse videoId from "${block.value}". Setting to search query.`);
                   block.value = `search:Video about ${chapter.title || 'topic'}`;
                }
              } else if (block.value.includes("youtu.be/")) {
                 const videoId = block.value.split("youtu.be/")[1]?.split('?')[0];
                 if (videoId) {
                    block.value = `https://www.youtube.com/embed/${videoId}`;
                 } else if (!block.value.startsWith('search:')) {
                    console.warn(`Could not parse videoId from "${block.value}". Setting to search query.`);
                    block.value = `search:Video about ${chapter.title || 'topic'}`;
                 }
              } else if (!block.value.startsWith('https://www.youtube.com/embed/') && !block.value.startsWith('search:')) {
                 console.warn(`Video URL "${block.value}" is not a recognized YouTube embed or search query. Defaulting to search.`);
                 block.value = `search:Video about ${chapter.title || 'topic'}`;
              }
            }
            // Ensure image blocks generated by AI (even if tool wasn't used perfectly or failed) still have a placeholder value and a fallback dataAiHint.
            if (block.type === 'image') {
              if (!block.value || !block.value.startsWith('https://placehold.co')) {
                block.value = `https://placehold.co/800x400.png`; // Enforce placeholder
              }
              if (!block.altText) {
                block.altText = `Placeholder image for ${chapter.title || 'content'}`;
              }
              if (!block.dataAiHint || block.dataAiHint.trim() === '' || block.dataAiHint.toLowerCase() === 'placeholder' || block.dataAiHint.toLowerCase() === 'image') {
                console.warn(`Missing or generic dataAiHint for image in chapter "${chapter.title}". Generating fallback.`);
                const chapterKeywords = (chapter.title || 'generic topic').toLowerCase().split(/\s+/).filter(w => w.length > 3 && !['the', 'for', 'and', 'with', 'into'].includes(w));
                if (chapterKeywords.length >= 2) {
                  block.dataAiHint = `${chapterKeywords[0]} ${chapterKeywords[1]}`;
                } else if (chapterKeywords.length === 1) {
                  block.dataAiHint = `${chapterKeywords[0]} illustration`;
                } else {
                  block.dataAiHint = `abstract visual`;
                }
              }
              // Ensure dataAiHint is max two words and not overly long
              block.dataAiHint = block.dataAiHint.split(' ').slice(0, 2).join(' ').substring(0, 50);
            }
          });
        });
      });

      return output;
    } catch (error: any) {
      console.error('Error in generateCourseStructureFlow:', error);
      let detailedMessage = `Failed to generate course structure: ${error.message || 'Unknown AI error'}`;
      if (error.details && typeof error.details === 'string' && error.details.includes('The model is overloaded.')) {
        detailedMessage = 'The AI model is currently overloaded. Please try again in a few moments.';
      } else if (error.message && error.message.includes('429 Too Many Requests')) {
        detailedMessage = 'AI generation failed due to API rate limits. Please try again after a minute.';
      }
      if (error.message && (error.message.includes('response_schema') && error.message.includes('format: only \'enum\' and \'date-time\' are supported for STRING type'))) {
        detailedMessage = `AI generation failed due to an internal schema mismatch with the Google API. The output schema might contain a string field with an unsupported 'format' (e.g., 'url'). Please ensure all URL-like string fields in the Zod output schema are plain z.string() without .url() or similar formatters. Original error: ${error.message}`;
      }
      throw new Error(detailedMessage);
    }
  }
);
    
    
